
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	
	МаскаСтроки = "Комиссия за реализацию товара от %Дата% склад %НаименованиеСклада% %Город% по счету %НомерСчета%";
	Строки = "Комиссия за реализацию товара от 21.05.2019 склад Центральный склад Москва по счету 152356"; //+ Символы.ПС + 
	//"Комиссия за реализацию товара от 23.05.2019 склад Склад-1 Подольск по счету 124543";
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)

	// TO-DO Здесь неправильная логика, потому что таблица ТЗПараметры должна быть динамической от параметров
	Для Счетчик = 1 По СтрЧислоСтрок(Строки) Цикл
		ЗаполнитьПараметрыСтроки(СтрПолучитьСтроку(Строки, Счетчик));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСтроку(Команда)
	
	// Тест
	ПолученнаяСтрока = Строки;
	                                                                                        
	ПолучитьСтруктуруМаскиСтроки(МаскаСтроки, ПолученнаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	МассивДанных = Новый Массив;
	
	МассивДанных.Добавить(Новый Структура("Наименование", "Москва"));
	МассивДанных.Добавить(Новый Структура("Наименование", "Подольск"));
	МассивДанных.Добавить(Новый Структура("Наименование", "Санкт-Петербург"));
		
	СоздатьТаблицуЗначенийИЗаполнить("ТЗ_Город", Новый Структура("Наименование", Новый ОписаниеТипов("Строка")), МассивДанных);
	
	
	МассивДанных.Очистить();
	МассивДанных.Добавить(Новый Структура("Наименование", "Центральный склад"));
	МассивДанных.Добавить(Новый Структура("Наименование", "Склад-1"));
	МассивДанных.Добавить(Новый Структура("Наименование", "Склад розница"));
	МассивДанных.Добавить(Новый Структура("Наименование", "Склад-44"));
	
	СоздатьТаблицуЗначенийИЗаполнить("ТЗ_Склад", Новый Структура("Наименование", Новый ОписаниеТипов("Строка")), МассивДанных);
	
	НоваяСтрока = ТЗПараметры.Добавить();
	НоваяСтрока.ИмяПараметра = "%Дата%";
	
	НоваяСтрока = ТЗПараметры.Добавить();
	НоваяСтрока.ИмяПараметра = "%НаименованиеСклада%";
	
	НоваяСтрока = ТЗПараметры.Добавить();
	НоваяСтрока.ИмяПараметра = "%Город%";
	
	НоваяСтрока = ТЗПараметры.Добавить();
	НоваяСтрока.ИмяПараметра = "%НомерСчета%";
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуЗначенийИЗаполнить(ИмяТаблицы, СтруктураКолонок, МассивДанных)
	
	ТЗ = Новый ТаблицаЗначений;
	
	Для каждого НСтр Из СтруктураКолонок Цикл
		
		ТЗ.Колонки.Добавить(НСтр.Ключ, НСтр.Значение);	
		
	КонецЦикла;
		
	Для каждого НСтр Из МассивДанных Цикл
		
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), НСтр);
		
	КонецЦикла;	
	
	СоздатьТаблицуНаФорме(ТЗ, ИмяТаблицы);
		
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуНаФорме(ТаблицаИсточник, ИмяТаблицыНаФорме)
	
    // добавим таблицу: сначала саму таблицу, потом колонку.
    Реквизиты = Новый Массив;
    Реквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицыНаФорме, Новый ОписаниеТипов("ТаблицаЗначений")));
    Для Каждого Колонка ИЗ ТаблицаИсточник.Колонки Цикл
        Реквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицыНаФорме));
    КонецЦикла;
	
    ИзменитьРеквизиты(Реквизиты);
	 
	// добавим элемент страница (группа формы)
	ЭлементСтраница = Элементы.Добавить("Стр" + ИмяТаблицыНаФорме, Тип("ГруппаФормы"), Элементы.ВкладкиДанных);
	ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
	ЭлементСтраница.Заголовок = ИмяТаблицыНаФорме;
	
	// добавим элемент таблица формы
    ЭлементТаблица = Элементы.Добавить(ИмяТаблицыНаФорме, Тип("ТаблицаФормы"), ЭлементСтраница);
    ЭлементТаблица.ПутьКДанным = ИмяТаблицыНаФорме;
	ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;

    // запретим менять положение строк и сами строки, отключим командную панель
    ЭлементТаблица.ИзменятьСоставСтрок = Ложь;
    ЭлементТаблица.ИзменятьПорядокСтрок = Ложь;
    
    Для Каждого Колонка ИЗ ТаблицаИсточник.Колонки Цикл
        Рек = Элементы.Добавить("Колонка" + Колонка.Имя + "_" + ИмяТаблицыНаФорме, Тип("ПолеФормы"), ЭлементТаблица);
        Рек.Вид = ВидПоляФормы.ПолеНадписи;
        Рек.Заголовок = Колонка.Заголовок;
        Рек.ПутьКДанным = ИмяТаблицыНаФорме + "." + Колонка.Имя;
    КонецЦикла;

    // заполним таблицу
    ЗначениеВРеквизитФормы(ТаблицаИсточник, ИмяТаблицыНаФорме);
	
КонецПроцедуры
  
&НаСервере
Процедура ПолучитьСтруктуруМаскиСтроки(МаскаСтроки, ПолученнаяСтрока)
	
	ТЗРегулярки.Очистить();	
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МаскаСтроки, " ");
	
	Строка = "";
	// создадим структуру данных вида Регулярка-Параметр
	Для каждого НСтр Из Массив Цикл
		МассивНайденных = ТЗПараметры.НайтиСтроки(Новый Структура("ИмяПараметра", НСтр));
		
		Если МассивНайденных.Количество() = 0 Тогда
			Строка = Строка + " " + НСтр;
		Иначе
			Если Не ПустаяСтрока(Строка) Тогда
				ЗаполнитьЗначенияСвойств(ТЗРегулярки.Добавить(), Новый Структура("Выражение, Вид", СокрЛП(Строка), "Регулярка"));
				Строка = "";
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТЗРегулярки.Добавить(), Новый Структура("Выражение, Вид", НСтр, "Параметр"));
		КонецЕсли;
		
	КонецЦикла;
	
	// определим диапозон регулярных выражений
	Массив = ТЗРегулярки.НайтиСтроки(Новый Структура("Вид", "Регулярка"));	
	Для каждого НСтр Из Массив Цикл
		ПозицияНачальная = Найти(ПолученнаяСтрока, НСтр.Выражение);
		ПозицияКонечная = ПозицияНачальная + СтрДлина(НСтр.Выражение);
		ИзменитьСтрокуВТзРегулярки(Новый Структура("Выражение, ПозицияНачальная, ПозицияКонечная", 
														НСтр.Выражение, ПозицияНачальная, ПозицияКонечная));
	КонецЦикла;
	
	//Возврат ТЗ;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтрокуВТзРегулярки(Структура)
	
	Массив = ТЗРегулярки.НайтиСтроки(Новый Структура("Выражение", Структура.Выражение));
	
	Для каждого НСтр Из Массив Цикл
		
		ЗаполнитьЗначенияСвойств(НСтр, Структура);
	
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСтроки(Строка)
	
	КонецСтроки = 0;
	НачалоСтроки = 0;
	ИсходныйНомерСтроки = 0;
	КонечныйНомерСтроки = ТЗРегулярки.Количество()-1;
	МассивПараметров = Новый Массив();
	
	// Идём по строкам, которые собрали в ТЗ Регулярка
	Для каждого НСтр Из ТЗРегулярки Цикл
		
		// Логика такая, если Строка имеет признак "Регулярка", тогда записываем в переменную 
		// НачалоСтроки, конечную позицию этой Строки. Когда доходим до "Параметра", сначала 
		// получаем Индекс (ИсходныйНомерСтроки), чтобы не выйти за пределы массива.
		// Если следующее значение за текущей строкой "Регулярка", тогда получаем КонецСтроки 
		// (начальная позиция "Регулярки"). 
		// Если следующее значение за текущей строкой "Параметр", тогда добавляем Строку
		// в МассивПараметров.
		// 
		// МассивПараметров - Идём по последовательно записанным, и получаем инверсированную строку
		// (то есть:
		// ПАРАМЕТР		ЗНАЧЕНИЕ
		// Параметр1 - 	Москва
		// Параметр2 - 	Калуга
		// Параметр3 - 	Минск
		// Записи в МассивСтрокПараметров будут такими:
		// 1. Москва Калуга Минск
		// 2. Москва Калуга 
		// 3. Москва
		// Это нужно для того, чтобы ситуации вида:
		// ПАРАМЕТР		ЗНАЧЕНИЕ
		// Параметр1 -	Склад Москва
		// Параметр2 -	Москва
		// Отрабатывали правильно
		// Поиск ведётся в таблице, куда нужно добавлять значения параметров. В случае если параметр не найден,
		// будет записано пустое значение
		// TO-DO: Нужно реализовать проверку, если Параметр не имеет ТЗ к обращению, то считать его до первого пробела
		// Например:
		// ПАРАМЕТР		ЗНАЧЕНИЕ		ТЗ
		// Параметр1 - 	Склад Москва    ТЗ_Склад
		// Параметр2 - 	Оптовый
		// Параметр3 - 	Доставка
		// Строка (Склад Москва оптовый доставка), для Параметр1 - поиск в ТЗ_Склад
		// для Параметр2, Параметр3 до первого пробела после "оптовый_" и "доставка_"
		// TO-DO:
		// Для массовой записи параметров нужно поменять логику процедуры СделатьЗаписьЗначения
		
		Если НСтр.Вид = "Регулярка" Тогда
			
			НачалоСтроки = НСтр.ПозицияКонечная;
					
		ИначеЕсли НСтр.Вид = "Параметр" Тогда
			НомерСтроки = ИсходныйНомерСтроки;
			
			Если НомерСтроки = КонечныйНомерСтроки Тогда
				
				КонецСтроки = СтрДлина(Строка)+1;	
				
				СделатьЗаписьЗначения(НСтр, Строка, НачалоСтроки, КонецСтроки); 
				
			ИначеЕсли ТЗРегулярки[НомерСтроки+1].Вид = "Регулярка" Тогда
				
				КонецСтроки = ТЗРегулярки[НомерСтроки+1].ПозицияНачальная;
				
				Если МассивПараметров.Количество() > 0 Тогда
				
					МассивПараметров.Добавить(НСтр);
										
					Для каждого СтрокаПараметров Из МассивПараметров Цикл
						
						МассивСтрокПараметров = ПолучитьИнверсированнуюСтроку(Строка, НачалоСтроки, КонецСтроки - НачалоСтроки);

						Для каждого СобраннаяСтрока Из МассивСтрокПараметров Цикл
							
							Если СтрокаПараметров.ТЗДляОбращения = "" Тогда
								
								СделатьЗаписьЗначения(СтрокаПараметров, СобраннаяСтрока);
								
								НачалоСтроки = НачалоСтроки + СтрДлина(СобраннаяСтрока);
								
								Прервать;
								
							ИначеЕсли ЭтоПараметрВТаблице(СтрокаПараметров.ТЗДляОбращения, СокрЛП(СобраннаяСтрока)) Тогда
								
								СделатьЗаписьЗначения(СтрокаПараметров, СобраннаяСтрока);
								
								НачалоСтроки = НачалоСтроки + СтрДлина(СобраннаяСтрока) + 1;
								
								Прервать;								
								
							КонецЕсли;
						
						КонецЦикла;				
						
					КонецЦикла;			
				
					МассивПараметров.Очистить();
					
				Иначе
					
					СделатьЗаписьЗначения(НСтр, Строка, НачалоСтроки, КонецСтроки);
					
				КонецЕсли;
				
			ИначеЕсли ТЗРегулярки[НомерСтроки+1].Вид = "Параметр" Тогда
				
				МассивПараметров.Добавить(НСтр);
				
			КонецЕсли;
						
		КонецЕсли;
		
		ИсходныйНомерСтроки = ИсходныйНомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнверсированнуюСтроку(Строка, НачалоСтроки, КонецСтроки)
	
	НеизвестнаяСтрока = Сред(Строка, НачалоСтроки, КонецСтроки);
	МассивСтрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НеизвестнаяСтрока, " ");

	ИнверсированныйМассив = Новый Массив();
	
	ВсегоСтрок = МассивСтрокПараметров.Количество()-1;
	
	Пока ВсегоСтрок >= 0 Цикл
		
		СборСтроки = "";
		
		Для каждого НСтр Из МассивСтрокПараметров Цикл
			
			СборСтроки = СборСтроки + НСтр + " ";	
			
		КонецЦикла;
		
		МассивСтрокПараметров.Удалить(ВсегоСтрок);
		
		ИнверсированныйМассив.Добавить(СокрЛП(СборСтроки));
		
		ВсегоСтрок = ВсегоСтрок - 1;
		
	КонецЦикла;
	
	Возврат ИнверсированныйМассив;
	
КонецФункции

&НаСервере
Процедура СделатьЗаписьЗначения(СтрокаТаблицы, СтрокаПолученная, НачПоз = 0, КонПоз = 0)
	
	Массив = ТЗПараметры.НайтиСтроки(Новый Структура("ИмяПараметра", СтрокаТаблицы.Выражение));
	
	Если НачПоз = 0 И КонПоз = 0 Тогда
		Массив[0].Значение = СокрЛП(СтрокаПолученная);
	Иначе
		Массив[0].Значение = СокрЛП(Сред(СтрокаПолученная, НачПоз, КонПоз - НачПоз)); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоПараметрВТаблице(НазваниеТаблицы, СтрокаПоиска)
	
	ТЗ = РеквизитФормыВЗначение(НазваниеТаблицы);
	
	Массив = ТЗ.НайтиСтроки(Новый Структура("Наименование", СтрокаПоиска));
	
	Возврат Массив.Количество() > 0;
	
КонецФункции
